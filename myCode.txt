 /**获取tablayout 某个子view**/
 public View getTabView(int position){
        View v = null;
        TabLayout.Tab tab = mTab.getTabAt(position);
        Field view=null;
        try {
            view=TabLayout.Tab.class.getDeclaredField("mView");
        } catch (NoSuchFieldException e) {
            e.printStackTrace();
        }
        view.setAccessible(true);
        try {
            v= (View) view.get(tab);
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        }
        return v;
    }


    ///封greendao and zxing

    tagGroup:标签控件
    https://github.com/2dxgujun/AndroidTagGroup

    //popuwindo +taggroup 要延迟设置tag

    //安卓方法数超过65k处理
    android { compileSdkVersion 21 buildToolsVersion "21.1.0"

    1.
    defaultConfig {
        ...
        minSdkVersion 14
        targetSdkVersion 21
        ...

        // Enabling multidex support.
        multiDexEnabled true
    }
        ...
    }
    2.
    dependencies { compile 'com.android.support:multidex:1.0.0' } 
    3.让application 继承MultiDexApplication 或者 
    @Override 
    protected void attachBaseContext(Context base) {
        super.attachBaseContext(base); MultiDex.install(this);
    }

    但随着一些SDK的引入，导致classes2.dex文件达到了200+KB，测试发现不少机型启动ANR、Crash，或者启动时间过长，回去看了下Android官方指出的MultiDex存在的问题，嗯，发现基本都是描述里提到的那些坑(启动时间过长、找不到类)！

    我们实际测试中发现首次启动classes2.dex加载需要1~2秒，非首次启动classes2.dex加载只需要几十毫秒左右。这可能就是为什么classes2.dex不能太大的一个原因。
    还有就是会可能出现anr和crash

    坑太多 不写了http://blog.csdn.net/richie0006/article/details/51103976
                美团技术团队：http://tech.meituan.com/mt-android-auto-split-dex.html
                github一款插件：https://github.com/TangXiaoLv/Android-Easy-MultiDex


//7.7封装mvp框架

interface baseView:
一些常用的ui显示隐藏
etc：吐司，加载框等

interface basePresenter:
interface Presenter<V extends BaseView>
//绑定ui的view接口
void attachView(V BaseView);
//进行解绑避免ui销毁了空指针
void detachView();
//如果有结合rx调用的话：
//往CompositeDisposable里面添加Disposiable
void addSubscrebe(Disposiable s){
    if(composite==null){
        composite = new CompositeDisposable();
    }
    composite.add(s);
}
//当ui销毁时调用取消掉所有下游接受信息
//在detachView()里面调用即可
void unSubscrebe(){
    if(composite!=null){
        compsite.cancel();
    }
}

BasePresenter<V extends BaseView> implements Presenter<V>{
    @Override
    public void attachView(V mvpView) {
        this.mvpView = mvpView;
    }
    @Override
    public void detachView() {
         mvpView = null;
         //如果有用到rx
         //unSubscrebe();
    }
    /**
     * 判断 view是否为空
     * @return
     */
    public  boolean isAttachView(){
        return mvpView != null;
    }
    /**
     * 返回目标view
     * @return
     */
    public  V getMvpView(){
        return mvpView;
    }
}


//其他业务presenter 要继承 basePersenter
etc:public class LoginPresenter extends BasePresenter<LoginView> implements ILoginPresenter


//baseActivity:
BaseMvpActivity<P extends Presenter<V>,V extends BaseMvpView>{
    //其他act实现该方法 传入presenter
    protected abs... P getPresenter();
    //在start方法里建立链接
     @Override
    protected void onStart() {
        super.onStart();
        presenter.attachView((V)this);//presenter与view断开连接
    }
    //destroy里销毁链接避免泄露
     @Override
    protected void onDestroy() {
        presenter.detachView();
        super.onDestroy();
    }
}


//retrofit 2+rxJava 2
异常可以使用map操作符处理
当code!=0或其他时
抛出一个自定义的异常
再在observer 的onError()方法中处理 判断异常类型并做出对应操作

如果没有使用rxjava的话 可以选择重写一个工厂在结果转换的过程中判断code并抛出异常



Html
 https://github.com/PrivacyApps/html-textview 解析html格式的tv
 richText 解析html加Markdown
 https://github.com/jhy/jsoup 获取html中的某个元素   
 关于html图片居中:http://blog.csdn.net/BestZhuRuicheng/article/details/52558891?locationNum=6

关于fragment
    https://github.com/YoKeyword/Fragmentation/blob/master/README_CN.md
    http://www.jianshu.com/p/d9143a92ad94

7.0适配：
        <provider
            android:name=".provider.MyProvider"  //自己重写一个provider继承fileProvider
            android:authorities="${applicationId}.fileprovider"
            android:grantUriPermissions="true"
            android:exported="false">
            <meta-data
                android:name="android.support.FILE_PROVIDER_PATHS"
                android:resource="@xml/file_paths" />
        </provider>

xml文件格式
<resources>
    <paths>
        <external-path path="" name="camera_photos" />
    </paths>
</resources>



推流：
    重要！！！！！！！！！！！！！
    如果使用腾讯推流sdk 服务器使用自己的话需要添加：mLivePushConfig.enableNearestIP(false);


效果
	关于滑动图片渐渐高斯模糊的做法：
		相同大小的2个imgeview 加载同一张图片，底层的加上高斯模糊特效，滑动是让上层iv透明度渐渐变0实现高斯模糊效果
		  <android.support.design.widget.CollapsingToolbarLayout
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    app:layout_scrollFlags="scroll|exitUntilCollapsed"
                    android:fitsSystemWindows="true"
                    app:contentScrim="?attr/colorPrimary"
                    app:expandedTitleMarginStart="48dp"
                    app:expandedTitleMarginEnd="64dp">

                    <ImageView
                        android:id="@+id/iv_theme_child_blur"
                        android:layout_width="match_parent"
                        android:layout_height="match_parent"
                        android:scaleType="centerCrop"
                        android:fitsSystemWindows="true"
                        app:layout_collapseMode="parallax" />  //视差感觉！！
                    <ImageView
                        android:id="@+id/iv_theme_child_origin"
                        android:layout_width="match_parent"
                        android:layout_height="match_parent"
                        android:scaleType="centerCrop"
                        android:fitsSystemWindows="true"
                        app:layout_collapseMode="parallax" />
                    <TextView
                        android:id="@+id/tv_theme_child_des"
                        android:layout_width="wrap_content"
                        android:layout_height="wrap_content"
                        android:layout_gravity="bottom|end"
                        android:textColor="@android:color/white"
                        android:textSize="16sp"
                        android:layout_margin="12dp"
                        />
                </android.support.design.widget.CollapsingToolbarLayout>



dagger2+butterknife冲突问题：
	 /* 解决Dagger2跟ButterKnife的冲突 */
    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }
    //配置ButterKnife:注意使用compile导包 : compile会编译到最后的APK或library，apt不会
	compile 'com.jakewharton:butterknife-compiler:8.6.0'
	
	 //Dagger2的使用注意使用provided引用butterKnife中的library解决冲突
  	compile 'org.glassfish:javax.annotation:10.0-b28'
  	compile 'com.google.dagger:dagger:2.5'
  	provided 'com.google.dagger:dagger-compiler:2.5'


 rxjava:
  使用flowable时应该在Subscriber的onSubscribe(Subscription s) 方法中调用s.request(int num);
  来告诉上游下游的处理能力，否则在同一线程中会抛出异常，在不同线程中下游将无法收到信息
  背压：如果flowable不是自己创建的情况下可以用：
  		.onBackpressureBuffer()
		.onBackpressureDrop()
		.onBackpressureLatest()

使用自定义toolbar NavigationIcon不居中：
	设置高度的同时 设置minHeight minHeight决定了icon的基准线
		
关于沉浸式状态栏的一些问题：http://blog.csdn.net/brian512/article/details/52096445
沉浸式状态栏中输入法挡住输入框：
	在输入框的所在的跟布局加上android:fitsSystemWindows="true"
软键盘弹出时toolbar标题不见了：
	给子布局加入scrollview包裹

retrofit:
	需要传入json格式字符串是 使用@POST @Field并且加上@FormUrlEncoded
自定义 menu
	http://blog.csdn.net/yanzhenjie1003/article/details/51902796

//toolbar
https://toutiao.io/posts/9akdvw/preview
//设置toolbar内容距离左边框的距离
 <style name="my_toolbar" parent="Base.Widget.AppCompat.ActionBar">
 		<item name="android:paddingLeft">14dp</item>   //toolbar内的子元素好像都会受到影响
        <item name="contentInsetStart">14dp</item>
        <item name="contentInsetStartWithNavigation">14dp</item>
</style>
<android.support.v7.widget.Toolbar
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
  	......
    style="@style/my_toolbar">

//设置返回按钮的padding
 <style name="myToolbarNavigationButtonStyle" parent="@style/Widget.AppCompat.Toolbar.Button.Navigation">
        <item name="android:minWidth">0dp</item>
        <item name="android:paddingLeft">14dp</item>
        <item name="android:paddingRight">14dp</item>
        <item name="android:scaleType">centerInside</item>
<style name="AppTheme" parent="Theme.AppCompat.Light.NoActionBar">
       ......
        <item name="toolbarNavigationButtonStyle">@style/myToolbarNavigationButtonStyle</item>
</style>

//引用不同的包出现的问题
java.lang.NoClassDefFoundError: android.support.v4.animation.AnimatorCompatHelper
再build根加上一下代码
configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == 'com.android.support') {
            if (!requested.name.startsWith("multidex")) {
                details.useVersion '24.1.0'
            }
        }
    }
}


as 3.0 使用butterknife：
只需要2个就可以
	compile 'com.jakewharton:butterknife:8.8.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'

Android Studio3.0 Error:Execution failed for task ':app:javaPreCompileDebug' 错误

	android {
    ...
    defaultConfig {
        ...
        //添加如下配置就OK了
        javaCompileOptions { annotationProcessorOptions { includeCompileClasspath = true } }
    }
    ...
}